---
layout: post
title: "Ты помнишь, как всё начиналось..."
date: 2012-02-27 17:56
comments: true
categories:
---

А начиналось всё на Донецком Хакатоне.

## Идея

Однажды мы с друзьями решили пойти на
[Донецкий Хакатон](http://dou.ua/calendar/1315/). Не просто так - командой, с
идеей. Обсуждали многое - "Где туалет", "Найди меня", вариации на тему
[Hackety Hack](http://hackety.com/)... Но больше всего таким задротам,
как мы, пришлась по сердцу идея одного из нас, Максима Цаплина:
игрофикация процесса разработки.

За основу идеи взяли [Coderwall](http://coderwall.com/). Зачем нужен ещё
один coderwall? - вероятно хотите спросить вы. Дело в том, что Coderwall
смотрит на ситуацию снаружи - на ваши действия на
[Github](https://github.com/). И ещё у него настолько большой временной
лаг при начислении достижения, что мне кажется, там есть какая-то баба
Маня, которая каждый понедельник с утра отводит внука в садик, садится и
начисляет ачивки. Мы же хотим построить нечто иное.  План состоит в том,
чтобы следить в реальном времени за коммитами, анализировать их и
обновлять профиль разработчика в реальном времени.

## Подготовка

Итак, игрофикация. Опыт, уровни, достижения. Архитектурно мы определили
три модуля: сервер, клиент и веб. Клиент должен навешиваться git hook'ом
на события коммита, анализировать их и выдавать обезличенную информацию
на сервер (чтобы не переживали за свои секретные проекты), сервер -
начислять опыт и достижения, веб - собственно, показывать всё это.

Стек технологий был выбран достаточно амбициозный - Javascript MVC для
веба, конкретно - [SpineJS](http://spinejs.com/), демонизированный
руби-процесс на сервере, с использованием
[EventMachine](http://rubyeventmachine.com/),
[em-synchrony](https://github.com/igrigorik/em-synchrony) и новомодных
Ruby 1.9.3 [Fibers](http://ruby-doc.org/core-1.9.3/Fiber.html), связь по
сокетам через [ZeroMQ](http://www.zeromq.org/), а на клиенте -
[NodeJS](http://nodejs.org/) демон, оповещающий пользователя о новых
событиях через Growl.

К сожалению, поразбираться со всем этим так и не случилось. Работа,
семья...

К началу Хакатона сервер решили объединить с вебом в одно приложение,
данные принимать через http запросы, никого ни о чём не оповещать - не
успеем, но чуток асинхронности оставить - использовать Resque на сервере
для обработки сообщений клиента.

## Прибыли!

На всякую мелочь, вроде ноутбуков, решили не размениваться - MacMini,
втрое большие HackMini, 22-х дюймовые мониторы, куча проводов...
Смотрели на нас волками. Стол шатался и грозился не выдержать. Мы
держались.

Я и Максим резво создали веб-приложение, добавили в него omni-auth и
development стратегию, после чего Андрей и Артём решили начать с
добавления туда авторизации через Гитхаб.

Постепенно вошли в рабочий ритм. Школьники "Шага" ушли и интернет стал
получше, дышать, опять же, стало легче, разбились на три пары и начали
спокойно и уверенно. Я и Максим были на "сервере" и на нашу долю выпало
прикручивание Resque и обработка и начисление достижений. Resque
прикрутился замечательно - легко и с полоборота.

Алексей и Роман увлёченно пилили клиента - того самого nodejs-ного
демона.

## Первые проблемы

Андрей и Артём, работавшие над вебом, однако, встретили проблемы с
самого начала. Непонятый Spine активно мешал разработке. На первой же
летучке было принято решение от него избавиться и начать радостно
клепать простой и понятный HTML.

Роман и Алексей старательно продолжали пилить клиента - его инсталляцию
и автозапуск. Сии две ввиду поверхностного знакомства с архитектурой Mac
OS X тоже сопротивлялись и пришлось городить лес граблей. Основным
справочником был исходный код проекта [pow.cx](http://pow.cx/).

## "Десять часов, полёт нормальный"

Написали массу кода и начали интегрироваться. Один Роман оставался в
стороне от бизнес-логики, продолжая втыкать грабли в процесс инсталляции
и поддержки демона приложения. Всё выглядело безоблачным.

{% img http://i.imgur.com/zzCVe.jpg %}

## Вторая часть Марлезонского балета или Отряд не заметил потери бойца

Одного из нас не стало. Максим не выдержал напряжения бессонной ночи, и
его силой пришлось отправлять спать. Мы продолжали работу. Уже решены
задачи деплоя приложения на
[демонстрационный сервер](http://moc.cssum.net/), включая сборку клиента и его размещение
в папке для инсталляции, веб стал красивым и полнофункциональным, а Лёша
вообще начал писать гайд. Ребята, работавшие над вебом, стали увлечённо
добавлять новые ачивки.

## Юрьев день

И тут всё развалилось. Ни одно из drop-in решений запуска resque workers
на production не заработало. Клиент стал вываливаться по малейшему чиху.
Даже `tail -f`, и тот стал обрываться на полуслове, что приводило в
особенный шок и трепет. При этом, наши воспалённые мозги не могли
сгенерировать ни малейшего верного решения. Мы бились с проблемами в
лучших традициях незабвенного героя Сервантеса, не пытаясь их обойти.

# Презентация

Грустно, но наш проект не заработал. В нём была правильная
последовательность действий, позволявшая продемонстрировать его с
выгодной точки зрения, но демонстрировавший его Роман воспроизвёл её
неправильно. Выступавший же Алексей явно нервничал и подать проект в
правильном свете не смог.

Но пятое из 18 мест осталось за нами.

## Планы

Этот проект обязательно увидит свет. Мало того, мы вернём в него весь
амбициозный технологический стек, который мы планировали. И ZeroMQ, и
EventMachine... Подпишитесь на этот блог или наш Твиттер, чтобы следить
за процессом разработки, и мы будем регулярно вещать с полей о том, как
идёт работа над проектом. Какие мельницы мы рушим и каких тараканов
давим. Что уже есть и что скоро будет.

Ждите!
